server.port=8000

# Diese Eigenschaft sorgt dafür, dass der für die H2-Datenbank 
# passende treiber geladen wird. Sollen mehrere Datenbanken 
# verwendet werden, sind Konfigurations-Beans einfacher!
spring.datasource.driverClassName: org.h2.Driver

# Diese Eigenschaft definiert eine URL. Hier wird ein lokaler 
# H2-Server angesprochen, dessen Konsole man einsehen kann; auf 
# diesem wiederum eine In-Memory-Datenbank. Alternativ ist es 
# möglich, ohne Server eine Embedded-Datenbank zu verwenden, z.B.
# mit
#   jdbc:h2:mem:testdb
# oder eine persistente eingebettete Datenbank mit
#   jdbc:h2:file:c:\\users\\xxx\\testdb
# oder eine persistente Datenbank über den Server mit
#   jdbc:h2:tcp://localhost/file:c:\\users\\xxx\\testdb
spring.datasource.url=jdbc:h2:tcp://localhost/mem:testdb

# Wir verwenden Standardusernamen und Passwörter (Demo)
spring.datasource.username: sa
spring.datasource.password:

# Diese Eigenschaft weist Hibernate an, das in der Datenbank
# vorgefundene Schema zu überprüfen und notwendigenfalls zu
# erweitern. Das ist nicht immer möglich, z.B. wenn eine neue
# Spalte zu einer Tabelle mit bestehenden Einträgen hinzugefügt 
# werden müsste, die zwar nicht null sein darf, aber für die es
# auch keinen Default-Wert gibt.
# Alternative ist z.B. create-drop (erzeugt und löscht Schema) oder
# validate (validiert nur).
spring.jpa.hibernate.ddl-auto=update

telegram.apitoken=${BOT_API_TOKEN}
telegram.developer.chatid=${DEVELOPER_CHAT_ID}